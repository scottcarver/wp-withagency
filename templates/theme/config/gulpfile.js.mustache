// Required Node/Gulop Plugins
const del = require('del');
const browserSync = require('browser-sync').create();
const gulp = require('gulp');
const autoprefixer = require('gulp-autoprefixer');
const babel = require('gulp-babel');
const minifycss = require('gulp-clean-css');
const concat = require('gulp-concat');
const flatten = require('gulp-flatten');
const rename = require('gulp-rename');
const sass = require('gulp-sass');
const sourcemaps = require('gulp-sourcemaps');
const uglify = require('gulp-uglify');
const minifymq = require('gulp-group-css-media-queries');


/* Distinct Use Cases
- combine css/js into globally shared files (style.css and dist/global)
- process compontent scss into oneoff .css files at (/dist/components/)
- process compontent js into oneoff js files at (/dist/components)
*/


// My Files
// const userScripts = require('./javascript_combined.json');
// const userCopiedScripts = require('./javascript_copied.json');

// Paths for src/dest
var paths = {
  primarycss: {
    src: 'library/style/style.scss',
    dest: '.'
  },
  styles: {
    src: ['library/style/**/*.scss', '!library/style/style.scss'],
    //  src: ['library/style/editor.scss', 'library/style/main.scss'],
    dest: 'dist/global/'
  },
  blocks: {
    src: 'library/block/**/*.scss',
    dest: 'dist/blocks/'
  },
  // Underscore makes invisible, ignore if starts with _
  blocksjs: {
    src: ['library/block/**/*.js', '!**/_*/**'],
    dest: 'dist/blocks/'
  },
  // Component CSS
  components: {
    src: 'library/component/**/*.scss',
    dest: 'dist/component/'
  },
  // Component JS
  componentjs: {
    // All individual js files for each component, ignore if starts with _
    src: ['library/component/**/*.js', '!**/_*/**'],
    dest: 'dist/component/'
  },
  // Convert javascript_combined.json into dist/main.min.js
  scripts: {
    src: ['js/**/*.js', '!js/unused/**'],
    dest: 'dist/global/',
    combined: require('./javascript_combined.json'),
    copied: require('./javascript_copied.json')
  },
  // Copy Images from library to dist
  images: {
    src: ['library/image/**/*'],
    dest: ['dist/image/']
  },
  // Copy Fonts from library to dist
  fonts: {
    src: ['library/font/**/*'],
    dest: ['dist/font/']
  }
};


/* 
 * deletes the contents of /dist
 */
function clean() {
  return del(['dist', 'style.css']);
}

/** 
 * creates /style.css 
 * contains a style definition only, read by the server but not enqueued
 */ 
function primaryStyle() {
  return gulp.src(paths.primarycss.src)
    .pipe(flatten())
    .pipe(sass())
    .pipe(rename('style.css'))
    .pipe(gulp.dest(paths.primarycss.dest))
    .pipe(browserSync.stream());
}

/*
 * Define our tasks using plain functions
 */
// creates /dist/global/main.min.css and /dist/global/editor.min.css
function combineGlobalStyles() {
  return gulp.src(paths.styles.src)
    .pipe(sourcemaps.init())
    .pipe(sass())
    .pipe(autoprefixer())
    .pipe(minifymq())
    .pipe(minifycss())
    .pipe(rename({ suffix: '.min' }))
    .pipe(sourcemaps.write('./'))
    .pipe(gulp.dest(paths.styles.dest))
    .pipe(browserSync.stream());
}

// creates oneoff css in /dist/blocks/*
function copyBlocksCSS() {
  return gulp.src(paths.blocks.src)
    .pipe(flatten())
    .pipe(sourcemaps.init())
    .pipe(sass())
    .pipe(autoprefixer())
    .pipe(minifymq())
    .pipe(minifycss())
    .pipe(rename({ suffix: '.min' }))
    .pipe(sourcemaps.write('./'))
    .pipe(gulp.dest(paths.blocks.dest))
    .pipe(browserSync.stream());
}

// creates oneoff js in /dist/blocks/*
function copyBlocksJS() {
  return gulp.src(paths.blocksjs.src)
    .pipe(flatten())
    .pipe(sourcemaps.init())
    .pipe(babel())
    .pipe(uglify())
    .pipe(rename({ suffix: '.min' }))
    .pipe(sourcemaps.write('./'))
    .pipe(gulp.dest(paths.componentjs.dest))
    .pipe(browserSync.stream());
}

// Combines all Component CSS into one file
function copyComponentCSS() {
  return gulp.src(paths.components.src)
    .pipe(flatten())
    .pipe(sourcemaps.init())
    .pipe(sass())
    .pipe(autoprefixer())
    .pipe(minifycss())
    .pipe(rename({ suffix: '.min' }))
    .pipe(sourcemaps.write('./'))
    .pipe(gulp.dest(paths.components.dest))
    .pipe(browserSync.stream());
}

function copyComponentJS() {
  return gulp.src(paths.componentjs.src)
    .pipe(flatten())
    .pipe(sourcemaps.init())
    .pipe(babel())
    .pipe(uglify())
    .pipe(rename({ suffix: '.min' }))
    .pipe(sourcemaps.write('./'))
    .pipe(gulp.dest(paths.componentjs.dest))
    .pipe(browserSync.stream());
}


function copyImages(){
  return gulp
    .src(paths.images.src)
    .pipe(gulp.dest(paths.images.dest));
}

/**
 * Straight copy fonts folder to dist
 */
function copyFonts(){
  return gulp
    .src(paths.fonts.src)
    .pipe(gulp.dest(paths.fonts.dest));
}


function combineScripts() {
  return gulp.src(paths.scripts.combined)
    .pipe(sourcemaps.init())
    .pipe(babel())
    .pipe(uglify())
    .pipe(concat('main.min.js'))
    .pipe(sourcemaps.write('./'))
    .pipe(gulp.dest(paths.scripts.dest))
    .pipe(browserSync.stream());
}

function copyScripts(){
  return gulp
    .src(paths.scripts.copied)
    .pipe(gulp.dest(paths.scripts.dest));
}

/* Are both Uglify and Concat Needed? */

function watch() {
  
  browserSync.init({
    port: 8888,
    proxy: 'localhost/test-wp-cli/', // Proxy running on localhost:8888
  });
  // Primary CSS
  gulp.watch(paths.primarycss.src, primaryStyle);
  // Combined Global Styles (main.min.css)
  gulp.watch(paths.styles.src, combineGlobalStyles);
  // Combined Global Scripts (main.min.js)
  gulp.watch(paths.scripts.combined, combineScripts);
  // Copy !
  gulp.watch(paths.blocks.src, copyBlocksCSS);
  // Copied 
  gulp.watch(paths.blocks.src, copyBlocksJS);
  gulp.watch(paths.blocks.src, copyComponentCSS);
  gulp.watch(paths.componentjs.src, copyComponentJS);
  gulp.watch(paths.images.src, copyImages);
  gulp.watch(paths.fonts.src, copyFonts);
  gulp.watch(paths.scripts.copied, copyScripts);
  
}

/*
 * Specify if tasks run in series or parallel using `gulp.series` and `gulp.parallel`
 */
var allTasks = [primaryStyle, combineGlobalStyles, combineScripts, copyBlocksCSS, copyBlocksJS, copyComponentJS, copyComponentCSS, copyImages, copyFonts];
var buildSeries = gulp.series(clean, gulp.parallel(allTasks));
var watchSeries = gulp.series(clean, buildSeries, watch);

/*
 * CommonJS `exports` notation use used to declare tasks
 */

exports.watch = watchSeries; // A series of tasks for 'watch'
exports.build = buildSeries; // A series of tasks for 'build'
exports.clean = clean; // a task that deletes /dist entirely
/*
 * Define default task that can be called by just running `gulp` from cli
 */
exports.default = buildSeries;